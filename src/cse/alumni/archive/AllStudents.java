/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cse.alumni.archive;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Siyam
 */
public class AllStudents extends javax.swing.JFrame {

    private final DBCollection users;
    private final MongoClient mongoClient;
    private final DB db;
    DefaultTableModel model;

    /**
     * Creates new form AllStudents
     */
    public AllStudents() {
        initComponents();
        mongoClient = new MongoClient("localhost", 27017);
        db = mongoClient.getDB("CSEAlumniArchive");
        users = db.getCollection("users");
        System.out.println("db connection ok");
        this.setTitle("All Students Information");
        refreshTble();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableAllStudents = new javax.swing.JTable();
        buttonSave = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tableAllStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Reg No.", "Contact", "Working Place"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAllStudents.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableAllStudents);

        buttonSave.setText("SAVE");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        buttonDelete.setText("DELETE");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92)
                .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSave)
                    .addComponent(buttonDelete))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        // TODO add your handling code here:

        int size = tableAllStudents.getRowCount();
        for (int i = 0; i < size; i++) {
            DBObject dBObject = new BasicDBObject();
            BasicDBObject whereQuery = new BasicDBObject();
            whereQuery.put("regNo", model.getValueAt(i, 1));
            dBObject = users.findOne(whereQuery);
            dBObject.put("name", model.getValueAt(i, 0).toString().toUpperCase());
            dBObject.put("contact", model.getValueAt(i, 2));
            dBObject.put("currentWorkPlace", model.getValueAt(i, 3));
            users.save(dBObject);
            System.out.println("saved");
        }
        refreshTble();
        JOptionPane.showMessageDialog(rootPane, "Database Updated.", "Success", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        // TODO add your handling code here:

        if (tableAllStudents.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(rootPane, "No item Selected.", "Warning!", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                
                int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Are You Sure?");
                if (showConfirmDialog == 0) {
                        DBObject dBObject = new BasicDBObject();
                        BasicDBObject whereQuery = new BasicDBObject();
                        whereQuery.put("regNo", model.getValueAt(tableAllStudents.getSelectedRow(), 1));
                        dBObject = users.findOne(whereQuery);
                        users.remove(dBObject);
                        System.out.println("deleted");
                }
            } catch (Exception e) {
                System.out.println("delete button: " + e);
            }
        }
        refreshTble();
    }//GEN-LAST:event_buttonDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableAllStudents;
    // End of variables declaration//GEN-END:variables

    private void refreshTble() {

        model = (DefaultTableModel) tableAllStudents.getModel();
        model.setRowCount(0);
        DBCursor cur = users.find();
        while (cur.hasNext()) {
            DBObject ob = cur.next();
            model.addRow(new Object[]{ob.get("name"), ob.get("regNo"), ob.get("contact"), ob.get("currentWorkPlace")});
        }
    }
}
